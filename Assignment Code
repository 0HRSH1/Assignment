#include <bits/stdc++.h>
using namespace std;

class UnionFind {
private:
    vector<int> parent, rank;

public:
    UnionFind(int n) {
        parent.resize(n);
        rank.resize(n);
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            rank[i] = 0;
        }
    }

    int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }

    void unite(int x, int y) {
        int px = find(x);
        int py = find(y);
        if (px == py) {
            return;
        }
        if (rank[px] < rank[py]) {
            parent[px] = py;
        } else {
            parent[py] = px;
            if (rank[px] == rank[py]) {
                rank[px]++;
            }
        }
    }
};

int makeConnected(int n, vector<vector<int>>& connections) {
    if (connections.size() < n - 1) {
        return -1;
    }
    UnionFind uf(n);
    for (const auto& connection : connections) {
        uf.unite(connection[0], connection[1]);
    }
    int num_components = 0;
    for (int i = 0; i < n; i++) {
        if (uf.find(i) == i) {
            num_components++;
        }
    }
    return num_components - 1;
}

int main() {
    int n = 4;
    vector<vector<int>> connections{{0,1},{0,2},{1,2}};
    int ans = makeConnected(n, connections);
    cout << ans << endl; // Output: 1
    return 0;
}
